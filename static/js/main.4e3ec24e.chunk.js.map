{"version":3,"sources":["pages/MainPage.module.scss","pages/app.module.scss","components/aboutMe/AboutMe.module.scss","components/navbar/NavBar.jsx","components/aboutMe/AboutMe.jsx","pages/mainPage.jsx","lib/fontawesome.jsx","pages/app.jsx","serviceWorker.js","index.js","components/navbar/NavBar.module.scss"],"names":["module","exports","HEADERS","url","text","ICONS","type","icon","NavBar","useState","isScrolled","setScrolled","ref","useRef","useEffect","scrollCallBack","window","addEventListener","pageYOffset","removeEventListener","id","className","st","map","header","index","key","href","i","target","EXPERIENCES","employer","role","date","lines","FadeInSection","children","domRef","isVisible","setVisible","observer","IntersectionObserver","entries","entry","isIntersecting","observe","current","unobserve","ExperienceTitle","ExperienceEntry","line","ExperienceContent","experience","TextSection","title","AboutMe","MainPage","styled","library","add","fab","fas","App","styles","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e3ec24e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainPage\":\"MainPage_MainPage__1-tIP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"app_App__1Ju2L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextSection\":\"AboutMe_TextSection__2bgY6\",\"Title\":\"AboutMe_Title__3X7X8\",\"WithDate\":\"AboutMe_WithDate__1nh5c\",\"FadeInSection\":\"AboutMe_FadeInSection__aubJE\",\"isVisible\":\"AboutMe_isVisible__2XPRV\",\"ExperienceEntry\":\"AboutMe_ExperienceEntry__2zmTO\"};","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as st from './NavBar.module.scss';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport interface NavLink {\r\n  url: string,\r\n  text: string\r\n}\r\n\r\nexport interface Icon {\r\n  type: string,\r\n  icon: string,\r\n  url: url\r\n}\r\n\r\nexport const HEADERS: NavLink[] = [\r\n  {\r\n    url: '/AboutMe',\r\n    text: 'About Me'\r\n  },\r\n  {\r\n    url: '/Resume',\r\n    text: 'My Resume'\r\n  },\r\n  {\r\n    url: '/FoodRecipes',\r\n    text: 'Food Recipes'\r\n  },\r\n  {\r\n    url: '/Coffee',\r\n    text: 'Coffee'\r\n  }\r\n]\r\n\r\nexport const ICONS: Icon[] = [\r\n  {\r\n    type: 'fab',\r\n    icon: 'linkedin',\r\n    url: 'https://www.linkedin.com/in/christopher-conlan/'\r\n  },\r\n  {\r\n    type: 'fab',\r\n    icon: 'github',\r\n    url: 'https://github.com/cconlan26'\r\n  },\r\n  {\r\n    type: 'fas',\r\n    icon: 'envelope-square',\r\n    url: 'mailto:cconlan26@gmail.com'\r\n  }\r\n]\r\n\r\nexport const NavBar = () => {\r\n\r\n  const [isScrolled, setScrolled] = useState(false);\r\n  const ref = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scrollCallBack = window.addEventListener(\"scroll\", () => {\r\n      setScrolled(window.pageYOffset > 200);\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", scrollCallBack);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"navbar\" className={`${st.Nav} ${isScrolled? st.Scrolled: ''}`} ref={ref}>\r\n      <div className={`${st.navTitleBox}`}>\r\n        <h1 className={`${st.navTitle}`}>\r\n          {isScrolled? 'Chris Conlan': 'Chris Conlan'}\r\n        </h1>\r\n      </div>\r\n      <div className={`${st.NavLinks}`}>\r\n    \t\t{HEADERS.map((header, index) => <a key={index} href={header.url}>{header.text}</a>)}\r\n      </div>\r\n      <ul className={`${st.NavIcons}`}>\r\n        {ICONS.map((i, index) => <li key={index} id='navIcon'><a href={i.url} target='_blank'><FontAwesomeIcon icon={[i.type, i.icon]}/></a></li>)}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as st from './AboutMe.module.scss'\r\n\r\nexport interface TextSectionProps {\r\n  title: React.ReactNode,\r\n  content: React.ReactNode\r\n}\r\n\r\ninterface SectionList {\r\n  listName: string,\r\n  entries: string[]\r\n}\r\n\r\nexport interface ExperienceEntryProps {\r\n  employer: string,\r\n  role: string,\r\n  date: string,\r\n  lines: string[]\r\n}\r\n\r\nconst EXPERIENCES: ExperienceEntryProps[] = [\r\n  {\r\n    employer: 'Comparison Creator',\r\n    role: 'Frontend Developer',\r\n    date: 'June, 2014',\r\n    lines: [\r\n            'Gained experience working with a company engaged with clients specializing in financial services, e.g. GoCompare.com, Moneysupermarket.com.',\r\n            'Improved skills in web development and design from using Photoshop and HTML.',\r\n            'Contributed to improving the design of a clientâ€™s website.'\r\n          ]\r\n  },\r\n  {\r\n    employer: 'Elevate',\r\n    role: 'App Developer',\r\n    date: '31st July - 22nd September',\r\n    lines: [\r\n            'Summer internship at Imperial College London in collaboration with an external industry collaborator and with a component of research in Computer Vision.',\r\n            'Worked on developing an App prototype in Java and Python using Android Studio and OpenCV.',\r\n            'Gained skills in both App Development and Computer Vision.'\r\n          ]\r\n  },\r\n  {\r\n    employer: 'Visa',\r\n    role: 'Software Engineer',\r\n    date: '23 July 2018 - 27 September 2019',\r\n    lines: [\r\n            'Experience in working at an international company and having to collaborate with people across the globe.',\r\n            'Experience in developing maintainable code for the large-scale VIP system which facilitates millions of transactions across the globe.',\r\n            'Completed the ISTQB Foundation level testing qualification to become a Certified Tester. Regularly tests written code during development',\r\n            'Experience in working in an Agile scrum team with CI/CD and developing in GoLang, C++ and Assembly.',\r\n          ]\r\n  },\r\n  {\r\n    employer: 'Amazon',\r\n    role: 'Software Engineer',\r\n    date: '3 October 2019 - Present',\r\n    lines: [\r\n            'Working on the Prime Video website which delivers content to millions across the globe.',\r\n            'Using Full stack technology such as React and Scala.'\r\n          ]\r\n  }\r\n]\r\n\r\nconst FadeInSection = ({ children }) => {\r\n  \r\n  const domRef = useRef();\r\n  const [isVisible, setVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(entries => {\r\n      // if (entries[0].isIntersecting) {\r\n      //   setVisible(true);        \r\n      //   observer.unobserve(domRef.current);\r\n      // }\r\n\r\n      entries.map(entry => {\r\n        setVisible(entry.isIntersecting);\r\n      })\r\n    });\r\n    \r\n    observer.observe(domRef.current);\r\n    \r\n    return () => observer.unobserve(domRef.current);\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={ domRef } className={`${st.FadeInSection} ${isVisible ? st.isVisible : ''}` }>\r\n      {children}\r\n    </div>);\r\n};\r\n\r\nconst ExperienceTitle = \r\n  <div className={`${st.Title}`}>\r\n    <h1>Experience</h1>\r\n  </div>\r\n\r\nconst ExperienceEntry = ( { employer, role, date, lines } : ExperienceEntryProps ) => {\r\n  return(\r\n    <div className={st.ExperienceEntry}>\r\n      <div className={`${st.WithDate}`}>\r\n        <h2>{employer} - {role}</h2>\r\n        <h3>{date}</h3>\r\n      </div>\r\n      {lines.map((line, index) => <p id={`line-${index}`} key={index}>{line}</p>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const ExperienceContent = () => \r\n    <div className={`${st.Content}`}>\r\n      {EXPERIENCES.map((experience, index) => \r\n        <FadeInSection key={index}>\r\n          <ExperienceEntry {...experience}/>\r\n        </FadeInSection>\r\n        )}\r\n    </div>\r\n\r\n\r\nexport const TextSection = ({title, children}) => {\r\n  return (\r\n    <div className={st.TextSection}>\r\n      {title}\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const AboutMe = () => {\r\n  return(\r\n    <TextSection title={ExperienceTitle}>\r\n      <ExperienceContent/>\r\n    </TextSection>\r\n  )\r\n}\r\n\r\nexport default AboutMe","import React from 'react'\r\nimport styled from './MainPage.module.scss'\r\nimport { AboutMe } from '../components/aboutMe/AboutMe'\r\n\r\nexport const MainPage = () => (\r\n  <div className={styled.MainPage}>\r\n    <AboutMe/>\r\n  </div>\r\n)\r\n\r\nexport default MainPage","// library\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\n// icons\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(fab, fas);","import React from 'react'\r\nimport { NavBar } from '../components/navbar/NavBar'\r\nimport { MainPage } from './mainPage.jsx'\r\nimport styles from './app.module.scss'\r\n\r\nimport '../lib/fontawesome';\r\n\r\nexport const App = () => (\r\n  <div className={styles.App}>\r\n  \t<NavBar/>\r\n    <MainPage/>\r\n  </div>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './pages/app';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"NavBar_Nav__2fDeI\",\"Scrolled\":\"NavBar_Scrolled__1kgNX\",\"NavLinks\":\"NavBar_NavLinks__32Rg7\",\"NavIcons\":\"NavBar_NavIcons__q9Z98\",\"navTitleBox\":\"NavBar_navTitleBox__3pmvl\",\"navTitle\":\"NavBar_navTitle__1DxAY\",\"up\":\"NavBar_up__3ploi\"};"],"sourceRoot":""}